# To-Do Fixes
- 401 unauthorized when signing out from profile page

- Change links for comments user in stream

- add errors to reducers

- remove selectedPhoto if not using at the end***

- add more seed users with images uploaded - solves how to add new users if no following (new user)

- filter out current_user photos from feed (when less than 3 followers)

***- _session_form.css: User signup form: when attempting to sign up with a password that's too short, CSS changes upon error rendering. This becomes a bigger issue if you also sign up with an existing user's username (additional errors).

  o - Create div specifically to host errors.
  o - Remove margin from errors styling
  o - populate div with errors so they don't increase the size

***- Profile Photos thumbnail: interpolate `${c_thumb,h_250,w_250/v1490083354}` into urls
http://res.cloudinary.com/calb3ars/image/upload/c_thumb,h_250,w_250/v1490083354/brooke-cagle-157923_stxunw.jpg

***- Form feedback on successful upload
***- Loading bar when waiting for response from Cloudinary on photo upload

- Seed Heroku DB with users and images

- Add tagline (string) and profile_image (text) columns to users table


- streamline font-awesome (camera icon) + streamline Google fonts if not using

- Clean up Hero Image to shadow fades into background (especially on right next to
  login form)

- session-form page: have submit button selected by default so when user presses enter, it logs them in rather than logging in demo user


####################################################################################
1) testing window.store = configureStore(); and receiving
    error message: "Uncaught TypeError: window.configureStore is not a function
        at <anonymous>:1:8"

    seems to be related to:
      Warning: Failed prop type: The prop `store` is marked as required in `Provider`, but its value is `undefined`.
        in Provider (created by Root)
        in Root

    solution: configureStore wasn't returning anything meaningful. Initial code had {} in function definition. Replaced with ()'s

2) testing window.store.dispatch(login(user)) and receiving
    error message: "window.store.getStatus()
      VM3953:1 Uncaught TypeError: Cannot read property 'getStatus' of undefined
      at <anonymous>:1:13

    solution: Navigation to root page and adding store (entry file) and login method(inside action file) to window

3) loading localhost:3000 during routes update for SessionFormContainer
    error message: "Uncaught Error: Module build failed: SyntaxError: Expected corresponding JSX closing tag for <Router> (15:8)"

    solution: Remove self-closing JSX tag from Route (closed later after nested routes. Nested routes created need for closing </Route> tag, so original self-closing tag could be made into an opening tag)

4) receiving 401 errors (invalid credentials on signup and login). State looks
    correct in React console, but server side returns errors.
    error message: Started POST "/api/session" for ::1 at 2017-03-15 08:39:15 -0700
    Processing by Api::SessionsController#create as JSON
    Parameters: {"user"=>{"user"=>{"username"=>"andrew", "password"=>"[FILTERED]"}}}
    Unpermitted parameter: user
    User Load (0.4ms)  SELECT  "users".* FROM "users" WHERE "users"."username" IS NULL LIMIT $1  [["LIMIT", 1]]
    Completed 401 Unauthorized in 1ms (Views: 0.1ms | ActiveRecord: 0.4ms)

    solution: user was nested. Removing { } around user in api (session) call resolved issue

5) after updating to clear errors on form change, currentUser not persisting.
    Server is returning 200
    message

    During clear errors, had added dispatch(clearErrors) to signup and login actions. This was removed because SessionReducer clears errors on merge with _nullUser

6) Checked out previous commit and worked on it. Committed without branching
    changes and merging, which overwrote. Thankfully, a backup copy was made before committing and this was used to restore local.

  solution: In order to reconcile remote, pulled remote and fixed small udates. Committed and pushed to remote

7) Heroku returning 500 server error. Checked heroku logs using:
      "heroku logs --tail"

    this revealed that "users" table was missing
      solution: needed to run migration for heroku server (need to seed users table first)

    Ran migration using "heroku run rake db:migrate"
    Checked with "heroku run rails c"

8) deletePhoto function returning promise, but not affecting DB. Server seems unable to return corresponding view (User show page, despite it existing)
  error message: Started DELETE "/api/photos/3" for ::1 at 2017-03-17 00:03:07 -0700
    Processing by Api::PhotosController#destroy as JSON
      Parameters: {"id"=>"3"}
      User Load (0.5ms)  SELECT  "users".* FROM "users" WHERE "users"."session_token" = $1 LIMIT $2  [["session_token", "UiwEm1LH2IHW3fvOgoF0hg"], ["LIMIT", 1]]
      Photo Load (0.4ms)  SELECT  "photos".* FROM "photos" WHERE "photos"."id" = $1 LIMIT $2  [["id", 3], ["LIMIT", 1]]
>>   No template found for Api::PhotosController#destroy, rendering head :no_content
    Completed 204 No Content in 44ms (ActiveRecord: 0.9ms)

    solution: .then function not being called in console

9) When creating Profile page, able to retrieve User profile information and display onto page. Also able to display number of posts (photos) a user has. However, unable to map through Photos array and render images. Receiving 404 error and server attempting [GET] request to "/[object%20Object]"): (which isn't supposed to exist)
  error message: Started GET "/api/users/1" for ::1 at 2017-03-20 01:01:24 -0700
Processing by Api::UsersController#show as JSON
Started GET "/[object%20Object]" for ::1 at 2017-03-20 01:01:24 -0700
  Parameters: {"id"=>"1"}

ActionController::RoutingError (No route matches [GET] "/[object%20Object]"):

  solution: When mapping through Photos array, need to save Photos as a variable outside the render's return function. Then you can access the photo elements this way.git

10) Server making extraneous requests when searching for followToggle. This is apparent when placing a debugger in the json jrender else statement for followToggle

  solution: Additional associations created N + 1 requests. This was solved by adding .includes(:follows) to the usersController. The result was a query for the user and all the user's followers at once rather than once for each follow instance.

11) Likes not deleting due to "dispatch is not a function"

  error message:  TypeError: dispatch is not a function
    at Object.deleteLike (http://localhost:3000/assets/bundle.self-0b75e686aa76445c98e47347db15958c486fb203d8b23f0b487d15f655e5cc57.js?body=1:37813:14)
    at LikeButton.deleteLike (http://localhost:3000/assets/bundle.self-0b75e686aa76445c98e47347db15958c486fb203d8b23f0b487d15f655e5cc57.js?body=1:37768:18)

    solution: Passing in currentUser from state and setting up toggle of state resolved

12) Stream page taking 800 - 1300 ms to loaded. I see this as an issue since users are usually unwilling to wait for photos to "load".

  Solution: After N + 1 queries removed, still receiving slow load times. Planning to implement infinite scroll to break out the chunks of the stream to increase load time (especially important for large streams)
